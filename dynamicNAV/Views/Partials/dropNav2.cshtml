@inherits Umbraco.Web.Mvc.UmbracoTemplatePage


@*
    This snippet makes a list of links of all visible pages of the site, as nested unordered html lists.

    How it works:
    - It uses a custom Razor helper called Traverse() to select and display the markup and links.
*@

@{ var selection = CurrentPage.Site(); 

    var isHome = true;

}

<div class="navbar navbar-default">

  <div class="container navWrap col-centered">

    <!--  NAVBAR START  -->

        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
        </div>

        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
              <ul class="nav navbar-nav">   

                <li class="dropdown">
                 <a href="#" class="dropdown-toggle menuTextMain" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">GUIA DO USUÁRIO</a>
                 
                

        @* Render the sitemap by passing the root node to the traverse helper, below *@
        @Traverse(selection, isHome)
                </li>
                </ul>
        </div>

    </div>

</div>

@* Helper method to travers through all descendants *@
@helper Traverse(dynamic node, bool isHome)
{
    @* Update the level to reflect how deep you want the sitemap to go *@
    var maxLevelForSitemap = 3;

    @* Select visible children *@
    var selection = node.Children.Where("Visible").Where("Level <= " + maxLevelForSitemap);

    @* If any items are returned, render a list *@
    if (selection.Any())
    {
        <ul class="dropdown-menu navItems">
            @if(isHome){
            var cssClass = CurrentPage.Site().Id == CurrentPage.Id ? "active" : null;
            <li class="@cssClass">
                <a href="@CurrentPage.Site().Url">@CurrentPage.Site().Name</a>
            </li>
            isHome = false;
            }
            @foreach (var item in selection)
            {
                <li class="@(item.IsAncestorOrSelf(CurrentPage) ? "active" : null) dropdown">
                    <a class="dropdown-toggle menuTextMain" href="@item.Url"  data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">@item.Name</a>

                    @* Run the traverse helper again for any child pages *@
                    @Traverse(item, isHome)
                    
                    @Traverse(item, isHome)
                </li>
            }
        </ul>
    }
}