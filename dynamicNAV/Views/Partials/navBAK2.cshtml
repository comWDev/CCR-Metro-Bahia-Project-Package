@inherits Umbraco.Web.Mvc.UmbracoTemplatePage


@*
    This snippet makes a list of links of all visible pages of the site, as nested unordered html lists.

    How it works:
    - It uses a custom Razor helper called Traverse() to select and display the markup and links.
*@

@{ var selection = CurrentPage.Site(); 

    var isHome = true;

}

<nav class="nav navbar navbar-default"
<div class="container navWrap col-centered">
    @* Render the sitemap by passing the root node to the traverse helper, below *@
    @Traverse(selection, isHome)
</div>
</nav>


@* Helper method to travers through all descendants *@
@helper Traverse(dynamic node, bool isHome)
{
    @* Update the level to reflect how deep you want the sitemap to go *@
    var maxLevelForSitemap = 3;

    @* Select visible children *@
    var selection = node.Children.Where("Visible").Where("Level <= " + maxLevelForSitemap);

    @* If any items are returned, render a list *@
    if (selection.Any())
    {
        <ul class="nav navbar-nav">
            @if(isHome){
            var cssClass = CurrentPage.Site().Id == CurrentPage.Id ? "active" : null;
            <li class="@cssClass">
                <a class="dropdown-toggle menuTextMain" href="@CurrentPage.Site().Url" role="button" aria-haspopup="false" aria-expanded="false">@CurrentPage.Site().Name</a>
            </li>
            isHome = false;
            }
            @foreach (var item in selection)
           {
                <li class="@(item.IsAncestorOrSelf(CurrentPage) ? "active" : null) dropdown">
                    <a class="dropdown-toggle menuTextMain" href="@item.Url">@item.Name</a>

                    @* Run the traverse helper again for any child pages *@
                    @* @Traverse(item, isHome) *@
                </li>
            }
        </ul>
    }
}