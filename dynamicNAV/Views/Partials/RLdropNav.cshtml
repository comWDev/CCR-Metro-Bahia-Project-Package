@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@using Umbraco.Web.Models
@*
    This snippet makes a list of links of all visible pages of the site, as nested unordered html lists.

    How it works:
    - It uses a custom Razor helper called Traverse() to select and display the markup and links.
*@

@{ var selection = CurrentPage.Site(); 

    var isHome = true;

}

<nav class="nav navbar navbar-default" data-spy="affix" data-offset-top="197" >
<div class="container navWrap col-centered">
    
    <div class="navbar-header">
      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
    <ul class="nav navbar-nav">
    @* Render the sitemap by passing the root node to the traverse helper, below *@
    @Traverse(selection, isHome)
    </ul>
        <form class="navbar-form navbar-right">
        <div class="form-group has-feedback">
          <input type="text" class="form-control" placeholder="Pesquisar"><i class="form-control-feedback glyphicon glyphicon-search"></i>
        </div>
        <!-- REMOVE BUTTON <button type="submit" class="btn btn-default">Enviar</button> -->
      </form>
    </div>
</div>
</nav>


@* Helper method to travers through all descendants *@
@helper Traverse(dynamic node, bool isHome)
{
    @* Update the level to reflect how deep you want the sitemap to go *@
    var maxLevelForSitemap = 3;

    @* Select visible children *@
    var selection = node.Children.Where("Visible").Where("Level <= " + maxLevelForSitemap);

    @* If any items are returned, render a list *@
    if (selection.Any())
    {
            
            
            if(isHome) {
                            var cssClass = CurrentPage.Site().Id == CurrentPage.Id ? "active" : null;
                            isHome = false;
                        }
            foreach (var childPage in selection.Where("Visible"))
                        {   
                            
                            if (childPage.Children.Any())
                            {                    
                                <li class="has-child @(childPage.IsAncestorOrSelf(CurrentPage) ? "selected" : null)">
                                <a class="menuHeader dropdown-toggle menuTextMain" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false" href="#">@childPage.Name</a>
                                
                            
                            <ul class="dropdown-menu navItems">
                                <li class="dropdown">
                                    @* Run the traverse helper again for any child pages *@
                                    @Traverse(childPage, isHome)
                                </li>
                            </ul>
                            </li>
                            }

                              else if (childPage.GetPropertyValue("anchorLinkOption")==true)
        {
            if (childPage.HasValue("rLinksTarget") && childPage.rLinksTarget.ToString().Length > 2)
            {
                foreach (var item in childPage.rLinksTarget)
                {
                    var linkTarget = (item.NewWindow) ? "_blank" : null;

                    <li class="@(childPage.IsAncestorOrSelf(CurrentPage) ? "selected" : null)">
                        <a class="menuTextMain" target="@linkTarget" href="@item.Link">@item.Caption</a>
                    </li>
                }
            }
        }



                            else
                            {
                                <li class="@(childPage.IsAncestorOrSelf(CurrentPage) ? "selected" : null)">
                                <a class="menuTextMain" href="@childPage.Url">@childPage.Name</a>
                                </li>
                            }            

                            
                        }
    
            }
}




